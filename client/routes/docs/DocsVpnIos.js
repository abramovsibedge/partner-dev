"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
require("../../static/scss/routes/docs.scss");
class DocsVpnIos extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (React.createElement("div", { className: "docsDiv" },
            React.createElement("h1", { id: "before-you-start" }, "Before You Start"),
            React.createElement("p", null, "In order to be able to use the SDK, the following steps have to be done:"),
            React.createElement("ol", null,
                React.createElement("li", null,
                    "Register an account at ",
                    React.createElement("a", { href: "https://developer.anchorfree.com" }, "developer.anchorfree.com")),
                React.createElement("li", null,
                    "Create a project and use a name for your project as a ",
                    React.createElement("em", null, "Public Key"),
                    ". Private key* is optional."),
                React.createElement("li", null,
                    "Use SDK with a ",
                    React.createElement("code", null, `carrierId`),
                    " equals to the given ",
                    React.createElement("em", null, "Public Key"),
                    " and ",
                    React.createElement("code", null, `baseURLString`),
                    " equals to ",
                    React.createElement("em", null, "URL"),
                    " from the project details.")),
            React.createElement("h1", { id: "caketube" }, "CakeTube"),
            React.createElement("p", null, "iOS SDK is a part of Anchorfree SDK which contains of client-side libraries and server-side applications needed to implement custom VPN infrastructure."),
            React.createElement("h3", { id: "features" }, "Features"),
            React.createElement("p", null, "The iOS SDK provides API containing:"),
            React.createElement("ul", null,
                React.createElement("li", null, "Classes and methods to authorize client users"),
                React.createElement("li", null, "Ability to connect to backend VPN service")),
            React.createElement("h3", { id: "requirements" }, "Requirements"),
            React.createElement("p", null, "iOS VPN SDK available only for iOS 8+ devices. "),
            React.createElement("h2", { id: "installation" }, "Installation"),
            React.createElement("h3", { id: "framework-static-" }, "Framework (static)"),
            React.createElement("p", null,
                "Download ",
                React.createElement("a", { href: "https://firebasestorage.googleapis.com/v0/b/web-portal-for-partners.appspot.com/o/products%2FCakeTubeSDK-iOS.framework.zip?alt=media&token=bf3b1181-72c7-4122-b34d-aa0d21f3bed5" }, "CakeTubeSDK.framework for iOS")),
            React.createElement("p", null,
                "Add ",
                React.createElement("strong", null, "CakeTubeSDK.framework"),
                " to your project."),
            React.createElement("p", null, "Add following frameworks to your project dependendencies:"),
            React.createElement("ul", null,
                React.createElement("li", null,
                    React.createElement("strong", null, "NetworkExtension")),
                React.createElement("li", null,
                    React.createElement("strong", null, "Security"))),
            React.createElement("p", null,
                "In your project: ",
                React.createElement("em", null, "Project"),
                " > ",
                React.createElement("em", null, "Build Settings"),
                " set \"Other linker flags\" to ",
                React.createElement("code", null, `-ObjC`),
                "."),
            React.createElement("h2", { id: "ios-library-api" }, "iOS library API"),
            React.createElement("p", null, "There are two main services intended to manage user and VPN connections. "),
            React.createElement("ul", null,
                React.createElement("li", null,
                    React.createElement("code", null, `CTClientService`)),
                React.createElement("li", null,
                    React.createElement("code", null, `CTConnectionService`))),
            React.createElement("h2", { id: "getting-started" }, "Getting Started"),
            React.createElement("p", null,
                "First, configure ",
                React.createElement("code", null, `CTClientService`),
                " with list of your API backend ",
                React.createElement("code", null, `baseURL`),
                "s and ",
                React.createElement("code", null, `carrierId`),
                ":"),
            React.createElement("pre", null,
                React.createElement("code", null, `[[CTClientService sharedInstance] configureWithBaseURLs:@[@"https://api.example.com"] carrierId:@â€Your PublicKeyâ€];
`)),
            React.createElement("p", null,
                "The best place to initialize with ",
                React.createElement("code", null, `baseUrl`),
                " is "),
            React.createElement("pre", null,
                React.createElement("code", null, `- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
`)),
            React.createElement("p", null,
                "method of your ",
                React.createElement("code", null, `AppDelegate`),
                " implementation. Then if you not already signed in your user, provide OAuth dialogs and receive OAuth access token, to login with PartnerSDK:"),
            React.createElement("pre", null,
                React.createElement("code", null, `[[CTClientService sharedInstance] loginWithOAuthToken:@â€Your OAuth tokenâ€ complete:^(NSError *error, CTUserProfile *subscriber)
    {
        // You can store subscriber for debugging
        // â€¦
}];
`)),
            React.createElement("p", null, "Or use the anonymous login if your app does not require user authentication:"),
            React.createElement("pre", null,
                React.createElement("code", null, `[CTClientService.sharedInstance loginWithOAuthToken:nil authMethod:CTClientServiceAuthMethodAnonymous complete:^(NSError *error, CTUserProfile *subscriber) {
    // ...
}];
`)),
            React.createElement("p", null, "This is only need to be run once on first login. Session will be saved internally and can only be removed with logout method. After user is logged in \u00E2\u20AC\u201C all API service methods is available. "),
            React.createElement("p", null,
                React.createElement("strong", null, "NOTE:"),
                " VPN connection methods of ",
                React.createElement("code", null, `CTConnectionService`),
                " are not available before users signed in."),
            React.createElement("h3", { id: "ctclientservice" }, "CTClientService"),
            React.createElement("p", null, "Manages client user: authentication, user licensing info, session management. Session will be saved after first successful sign in and destroyed and cleaned up after logout."),
            React.createElement("h4", { id: "ctclientservice-api" }, "CTClientService API"),
            React.createElement("pre", null,
                React.createElement("code", null, `+ (CTClientService *)sharedInstance;
`)),
            React.createElement("p", null, " Get shared instance of service. Service is a singleton."),
            React.createElement("pre", null,
                React.createElement("code", null, ` - (void)loginWithOAuthToken:(NSString *)accessToken complete:(CTLoginBlock)completeBlock;
`)),
            React.createElement("p", null, "User sign in with OAuth access token."),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)getSubscriberInfo:(CTUserProfileBlock)completeBlock;
`)),
            React.createElement("p", null, "Retrieve user's information and current license."),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)getServers:(CTServersBlock)completeBlock;
`)),
            React.createElement("p", null,
                "Retrieve available servers with geographic location info. The ",
                React.createElement("code", null, `CTServersBlock`),
                " contains servers array (Array of ",
                React.createElement("code", null, `CTServerLocation`),
                " objects)."),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)getTrafficStats:(CTCountersBlock)completeBlock;
`)),
            React.createElement("p", null, "Retrieve traffic stats for current session. "),
            React.createElement("p", null,
                React.createElement("strong", null, "NOTE:"),
                " ",
                React.createElement("code", null, `CTCounters`),
                " contains the ",
                React.createElement("code", null, `tx`),
                " and ",
                React.createElement("code", null, `rx`),
                " values. Use ",
                React.createElement("code", null, `tx`),
                " as received traffic (IN) (bytes), and ",
                React.createElement("code", null, `rx`),
                " as transmitted traffic (OUT) (bytes) (TX and RX are in terms of server traffic)"),
            React.createElement("pre", null,
                React.createElement("code", null, `- (BOOL)isLoggedIn;
`)),
            React.createElement("p", null, "Checks if current user is logged in."),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)logout
`)),
            React.createElement("p", null, "Log out and destroy session information. User will be deauthorized and session will be destroyed after invocation."),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)setCurrentServer:(NSString *)location;
`)),
            React.createElement("p", null,
                "Sets the current server. The location should be in short ",
                React.createElement("em", null, "ISO 3166"),
                " format, the best practice is to get the location from the ",
                React.createElement("code", null, `getServers:`),
                " method, and use ",
                React.createElement("code", null, `CTServerLocation`),
                " object\u00E2\u20AC\u2122s ",
                React.createElement("code", null, `location`),
                " string as a parameter to this method. If you haven\u00E2\u20AC\u2122t used this method, the server will be chosen randomly by backend."),
            React.createElement("h3", { id: "ctconnectionservice" }, "CTConnectionService"),
            React.createElement("p", null, "Manages device's VPN connection. To establish VPN connection in iOS 9, the VPN SDK will asks once with service configuration. To establish VPN connection in iOS 8 user should manually add client certificate to their device, the SDK will pops installation dialog for user."),
            React.createElement("h4", { id: "ctconnectionservice-api" }, "CTConnectionService API"),
            React.createElement("pre", null,
                React.createElement("code", null, `+ (CTConnectionService *)sharedInstance;
`)),
            React.createElement("p", null, "Get shared instance of service. Service is a singleton."),
            React.createElement("pre", null,
                React.createElement("code", null, `@property (atomic, strong) NSNotificationCenter *notificationCenter
`)),
            React.createElement("p", null,
                "Retrieve notification center to receive VPN state notifications. Notification delivers with ",
                React.createElement("code", null, `CTConnectionServiceStatusDidChangeNotification`),
                ", the status is available in userInfo as:"),
            React.createElement("pre", null,
                React.createElement("code", null, `NSDictionary *userInfo = @{@"newStatus": @(status), @"oldStatus": @(_status)};
`)),
            React.createElement("p", null,
                React.createElement("strong", null, "NOTE:"),
                " to handle VPN connection state you may implement proper notification handling. See ",
                React.createElement("code", null, `CTConnectionServiceStatus`),
                " enum for more info about VPN state."),
            React.createElement("pre", null,
                React.createElement("code", null, `@property (atomic) CTConnectionServiceStatus status;
`)),
            React.createElement("p", null, "Current VPN state"),
            React.createElement("pre", null,
                React.createElement("code", null, `- (void)connectWithCompletion:(void (^)(NSError *error))completion;
`)),
            React.createElement("p", null,
                "Primary connection method. This method will configure application's VPN profile, makes it active and connects to remote host. Completion function contains error object which is not ",
                React.createElement("code", null, `nil`),
                " if error occured. See the available ",
                React.createElement("code", null, `NSError`),
                " list in the ",
                React.createElement("strong", null, "Handling Errors"),
                " session."),
            React.createElement("pre", null,
                React.createElement("code", null, ` - (void)disconnectWithCompletion:(void (^)(NSError *error))completion;
`)),
            React.createElement("p", null,
                "Disconnects from current connection. Completion function contains error object which is not ",
                React.createElement("code", null, `nil`),
                " if error occured."),
            React.createElement("h3", { id: "ctconnectionservicestatus" }, "CTConnectionServiceStatus"),
            React.createElement("p", null,
                "Enum containing VPN connection state notifications. To receive and handle notification you should subscribe to ",
                React.createElement("code", null, `NSNotificationCenter`),
                " notifications."),
            React.createElement("pre", null,
                React.createElement("code", null, `CTConnectionServiceStatusUndefined
CTConnectionServiceStatusInvalid
CTConnectionServiceStatusDisconnected
CTConnectionServiceStatusConfiguring
CTConnectionServiceStatusConnecting
CTConnectionServiceStatusConnected
CTConnectionServiceStatusDisconnecting
`)),
            React.createElement("h3", { id: "blocks-signatures" }, "Blocks signatures"),
            React.createElement("pre", null,
                React.createElement("code", null, `typedef void (^CTLoginBlock)        (NSError *error, CTUserProfile *subscriber);
typedef void (^CTCredentialsBlock)    (NSError *error, CTCredentials *credentials);
typedef void (^CTUserProfileBlock)    (NSError *error, CTUserProfile *subscriber);
typedef void (^CTServersBlock)        (NSError *error, NSArray *servers);
typedef void (^CTCountersBlock)        (NSError *error, CTCounters *countersResponse);
`)),
            React.createElement("h3", { id: "handling-errors" }, "Handling Errors"),
            React.createElement("p", null,
                "In some cases, such as exceeded user traffic or if user reaches the available devices/session limit and also the connection issues, the SDK methods return ",
                React.createElement("code", null, `NSError`),
                " object associated with that error in it\u00E2\u20AC\u2122s completion block."),
            React.createElement("p", null,
                "To implement error handling in your app, always check the ",
                React.createElement("code", null, `NSError`),
                " in completion blocks, it\u00E2\u20AC\u2122s nil if there is no errors."),
            React.createElement("p", null,
                "The ",
                React.createElement("code", null, `NSError`),
                " can contain two domains, the most important one is the ",
                React.createElement("code", null, `CTNetworkClientErrorDomain`),
                ". Such error contains code which is the ",
                React.createElement("code", null, `CTNetworkClientError`),
                " enum value (enum is available in ",
                React.createElement("em", null, "CTNetworkClient.h"),
                "). You can compare that code to the possible code list and handle this error in your VPN client app. Here is a description of the enum:"),
            React.createElement("pre", null,
                React.createElement("code", null, `CTNetworkClientErrorUndefined,
CTNetworkClientErrorSessionsExceed,
CTNetworkClientErrorUserSuspended,
CTNetworkClientErrorTrafficExceed,
CTNetworkClientErrorUnauthorized,
CTNetworkClientErrorServerUnavailable,
CTNetworkClientErrorError,
CTNetworkClientErrorDevicesExceed
`)),
            React.createElement("p", null,
                "For the ",
                React.createElement("code", null, `CTNetworkClientErrorDomain`),
                " error there is also server code string available in userInfo (Key ",
                React.createElement("code", null, `@"message"`),
                "), in some cases it may be nil. This code string could be used in your app debug logs."),
            React.createElement("p", null,
                React.createElement("strong", null, "NOTE:"),
                " to support just the basics of error handling implement this check in the ",
                React.createElement("code", null, `connectWithCompletion:`),
                " method of the ",
                React.createElement("code", null, `CTConnectionService`),
                ". The most of possible error will be available here."),
            React.createElement("p", null,
                "The second domain is a simple string constant ",
                React.createElement("code", null, `@"com.northghost.afvpn"`),
                ". This kind of ",
                React.createElement("code", null, `NSError`),
                " is rare and occurs if the SDK is misconfigured or used incorrectly, see the device logs for resolution.")));
    }
}
exports.DocsVpnIos = DocsVpnIos;
//# sourceMappingURL=DocsVpnIos.js.map